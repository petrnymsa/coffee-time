import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes
// ignore_for_file: unnecessary_brace_in_string_interps

//WARNING: This file is automatically generated. DO NOT EDIT, all your changes would be lost.

typedef LocaleChangeCallback = void Function(Locale locale);

class I18n implements WidgetsLocalizations {
  const I18n();
  static Locale _locale;
  static bool _shouldReload = false;

  static set locale(Locale newLocale) {
    _shouldReload = true;
    I18n._locale = newLocale;
  }

  static const GeneratedLocalizationsDelegate delegate = GeneratedLocalizationsDelegate();

  /// function to be invoked when changing the language
  static LocaleChangeCallback onLocaleChanged;

  static I18n of(BuildContext context) =>
    Localizations.of<I18n>(context, WidgetsLocalizations);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  /// "Refresh"
  String get refresh => "Refresh";
  /// "Confirm"
  String get confirm => "Confirm";
  /// "Oops, something went wrong."
  String get somethingWrong => "Oops, something went wrong.";
  /// "Cafes"
  String get tabs_cafes => "Cafes";
  /// "Favorites"
  String get tabs_favorites => "Favorites";
  /// "Map"
  String get tabs_map => "Map";
  /// "Settings"
  String get tabs_settings => "Settings";
  /// "Open"
  String get openingHours_open => "Open";
  /// "Closed"
  String get openingHours_closed => "Closed";
  /// "No cafes found."
  String get cafeList_noCafes => "No cafes found.";
  /// "No favorites yet."
  String get favorites_noFavorites => "No favorites yet.";
  /// "Navigate"
  String get detail_navigate => "Navigate";
  /// "Opening hours"
  String get detail_openingHoursTitle => "Opening hours";
  /// "Tags"
  String get detail_tagsTitle => "Tags";
  /// "No tags added"
  String get detail_noTags => "No tags added";
  /// "Suggest change"
  String get detail_suggestChange => "Suggest change";
  /// "Reviews"
  String get detail_reviewsTitle => "Reviews";
  /// "Web page"
  String get detail_webpage => "Web page";
  /// "Suggest changes"
  String get reviews_title => "Suggest changes";
  /// "Add tags"
  String get reviews_add => "Add tags";
  /// "Users create tags. Could you help us improve them?"
  String get reviews_headerTitle => "Users create tags. Could you help us improve them?";
  /// "It's not necessary to review each tag."
  String get reviews_haederSubTitle => "It's not necessary to review each tag.";
  /// "True"
  String get reviews_true => "True";
  /// "False"
  String get reviews_false => "False";
  /// "Choose tags"
  String get addTags_title => "Choose tags";
  /// "Choose one or more tags."
  String get addTags_header => "Choose one or more tags.";
}

class _I18n_en_US extends I18n {
  const _I18n_en_US();

  @override
  TextDirection get textDirection => TextDirection.ltr;
}

class _I18n_cs_CZ extends I18n {
  const _I18n_cs_CZ();

  /// "Obnovit"
  @override
  String get refresh => "Obnovit";
  /// "Potvrdit"
  @override
  String get confirm => "Potvrdit";
  /// "Jejda! Něco se pokazilo."
  @override
  String get somethingWrong => "Jejda! Něco se pokazilo.";
  /// "Kavárny"
  @override
  String get tabs_cafes => "Kavárny";
  /// "Oblíbené"
  @override
  String get tabs_favorites => "Oblíbené";
  /// "Mapa"
  @override
  String get tabs_map => "Mapa";
  /// "Nastavení"
  @override
  String get tabs_settings => "Nastavení";
  /// "Otevřeno"
  @override
  String get openingHours_open => "Otevřeno";
  /// "Zavřeno"
  @override
  String get openingHours_closed => "Zavřeno";
  /// "Nebyly nalezeny žádné kavárny."
  @override
  String get cafeList_noCafes => "Nebyly nalezeny žádné kavárny.";
  /// "Zatím žádné oblíbené."
  @override
  String get favorites_noFavorites => "Zatím žádné oblíbené.";
  /// "Navigovat"
  @override
  String get detail_navigate => "Navigovat";
  /// "Otevírací doba"
  @override
  String get detail_openingHoursTitle => "Otevírací doba";
  /// "Značky"
  @override
  String get detail_tagsTitle => "Značky";
  /// "Nebyly přidány žádné značky"
  @override
  String get detail_noTags => "Nebyly přidány žádné značky";
  /// "Navrhnout změnu"
  @override
  String get detail_suggestChange => "Navrhnout změnu";
  /// "Recenze"
  @override
  String get detail_reviewsTitle => "Recenze";
  /// "Webová stránka"
  @override
  String get detail_webpage => "Webová stránka";
  /// "Navrhněte změny"
  @override
  String get reviews_title => "Navrhněte změny";
  /// "Přidat štítky"
  @override
  String get reviews_add => "Přidat štítky";
  /// "Uživatelé vytvářejí značky. Můžete nám pomoci vylepšit je?"
  @override
  String get reviews_headerTitle => "Uživatelé vytvářejí značky. Můžete nám pomoci vylepšit je?";
  /// "Není nutné hodnotit každou značku."
  @override
  String get reviews_haederSubTitle => "Není nutné hodnotit každou značku.";
  /// "Pravda"
  @override
  String get reviews_true => "Pravda";
  /// "Nepravdivé"
  @override
  String get reviews_false => "Nepravdivé";
  /// "Vyberte značky"
  @override
  String get addTags_title => "Vyberte značky";
  /// "Vyberte jednu nebo více značek."
  @override
  String get addTags_header => "Vyberte jednu nebo více značek.";

  @override
  TextDirection get textDirection => TextDirection.ltr;
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<WidgetsLocalizations> {
  const GeneratedLocalizationsDelegate();
  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("en", "US"),
      Locale("cs", "CZ")
    ];
  }

  LocaleResolutionCallback resolution({Locale fallback}) {
    return (Locale locale, Iterable<Locale> supported) {
      if (isSupported(locale)) {
        return locale;
      }
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    };
  }

  @override
  Future<WidgetsLocalizations> load(Locale locale) {
    I18n._locale ??= locale;
    I18n._shouldReload = false;
    final String lang = I18n._locale != null ? I18n._locale.toString() : "";
    final String languageCode = I18n._locale != null ? I18n._locale.languageCode : "";
    if ("en_US" == lang) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_en_US());
    }
    else if ("cs_CZ" == lang) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_cs_CZ());
    }
    else if ("en" == languageCode) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_en_US());
    }
    else if ("cs" == languageCode) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_cs_CZ());
    }

    return SynchronousFuture<WidgetsLocalizations>(const I18n());
  }

  @override
  bool isSupported(Locale locale) {
    for (var i = 0; i < supportedLocales.length && locale != null; i++) {
      final l = supportedLocales[i];
      if (l.languageCode == locale.languageCode) {
        return true;
      }
    }
    return false;
  }

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => I18n._shouldReload;
}